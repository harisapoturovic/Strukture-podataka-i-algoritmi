#include<iostream>
#include<cmath>
using namespace std;

struct Tacka3D
{
	int x;
	int y;
	int z;

	Tacka3D(int xx = 0, int yy = 0, int zz = 0) :x(xx), y(yy), z(zz) {}

	void Ispis() { cout << "t(" << x << "," << y << "," << z << ")" << endl; }

	bool JednakaSa(Tacka3D t)
	{
		if (x == t.x && y == t.y && z == t.z)
			return true;
		else
			return false;
	}
};

int h1(Tacka3D k) { return sqrt(pow((k.x + k.y + k.z), 2)); }

int h2(Tacka3D k) { return sqrt(pow(k.x, 2) / 3 + pow(k.y, 2) / 3 + pow(k.z, 2) / 3); }

struct HesiranjeOtvorenoAdresiranje
{
	int max = 10;
	Tacka3D* niz = new Tacka3D[max];
	bool* Zauzeto = new bool[max];
	int brojac = 0;

	HesiranjeOtvorenoAdresiranje()
	{
		for (int i = 0; i < max; i++)
			Zauzeto[i] = false;
	}

	int HashFunkcija(Tacka3D k, int i) { return (h1(k) + i * h2(k)) % max; }

	void Dodaj(Tacka3D k)
	{
		if (JelPun()) 
		{
			cout << "Greska-> Nema prostora." << endl;
			return;
		}
		int i = 0;
		int p;

		while (true)
		{
			i++;
			p = HashFunkcija(k, i);
			if (!Zauzeto[p])
				break;
		}
		niz[p] = k;
		Zauzeto[p] = true;
		brojac++;
	}

	void Ukloni(Tacka3D k)
	{
		if (JelPrazan()) 
		{
			cout << "Greska-> Nema elemenata." << endl;
			return;
		}
		int i = 0;
		int p;

		while (true)
		{
			i++;
			p = HashFunkcija(k, i);

			if (Zauzeto[p] && niz[p].JednakaSa(k))
			{
				Zauzeto[p] = false;
				brojac--;
				return;
			}
		}
		
	}

	void Ispis()
	{
		for (int i = 0; i < max; i++)
		{
			if (Zauzeto[i]) 
			{
				cout << i << ". "; 
				niz[i].Ispis();
			}
			else
				cout << i << ". " << endl;
		}
	}

	bool JelPun() {	return brojac == max; }

	bool JelPrazan() { return brojac == 0; }
};

void main()
{
	HesiranjeOtvorenoAdresiranje A;

	A.Dodaj(Tacka3D(1, 5, 12));
	A.Dodaj(Tacka3D(9, 8, 1));
	A.Dodaj(Tacka3D(3, 4, 6));
	A.Dodaj(Tacka3D(10, 2, 17));

	A.Ispis();

	cout << "_______________________________________________" << endl;

	A.Ukloni(Tacka3D(3, 4, 6));

	A.Ispis();
};